import{_ as s,o as a,c as n,S as o}from"./chunks/framework.cab334f2.js";const u=JSON.parse('{"title":"Storages","description":"","frontmatter":{},"headers":[],"relativePath":"guide/storages.md","filePath":"guide/storages.md","lastUpdated":1695910821000}'),e={name:"guide/storages.md"},l=o(`<h1 id="storages" tabindex="-1">Storages <a class="header-anchor" href="#storages" aria-label="Permalink to &quot;Storages&quot;">​</a></h1><p>Storages are the responsible to save, retrieve and serialize (if needed) cache data. They are completely customizable and you can code or using another one’s published on NPM.</p><p>They are meant to be the middleware between the cache interceptor and some sort of database (persistent or not) you may have. Our interceptors will call its methods internally to save and retrieve data. But you can do it manually to work programmatically on your way.</p><p>Currently, two storages are included in the library by default:</p><ul><li><a href="#memory-storage">Memory Storage</a> accessible with <code>buildMemoryStorage</code> <em>(works on Node and Web)</em></li><li><a href="#web-storage-api">Web Storage API</a> accessible with <code>buildWebStorage</code> <em>(works on Web only)</em></li></ul><h2 id="memory-storage" tabindex="-1">Memory Storage <a class="header-anchor" href="#memory-storage" aria-label="Permalink to &quot;Memory Storage&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong>This is the storage chosen by default</strong></p></div><p>A memory storage is the simplest one. It works everywhere and its values are lost upon page reload or when the process is killed.</p><p>If you are directly mutating some response property, you probably will face some reference issues because the storage will also get mutated. To avoid that, you can use the <code>clone: true</code> option to clone the response before saving it or <code>clone: &#39;double&#39;</code> to also clone both ways, on <code>set()</code> and on <code>get()</code>. <em>Just like <a href="https://github.com/arthurfiorette/axios-cache-interceptor/issues/163" target="_blank" rel="noreferrer">#136</a> and many others.</em></p><p>For long running processes, you can avoid memory leaks by using playing with the <code>cleanupInterval</code> option. And can reduce memory usage with <code>maxEntries</code>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Axios </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;axios&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { setupCache, buildMemoryStorage } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;axios-cache-interceptor&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setupCache</span><span style="color:#E1E4E8;">(axios, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// You don&#39;t need to to that, as it is the default option.</span></span>
<span class="line"><span style="color:#E1E4E8;">  storage: </span><span style="color:#B392F0;">buildMemoryStorage</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* cloneData default=*/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* cleanupInterval default=*/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* maxEntries default=*/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Axios </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;axios&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { setupCache, buildMemoryStorage } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;axios-cache-interceptor&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">setupCache</span><span style="color:#24292E;">(axios, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// You don&#39;t need to to that, as it is the default option.</span></span>
<span class="line"><span style="color:#24292E;">  storage: </span><span style="color:#6F42C1;">buildMemoryStorage</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* cloneData default=*/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* cleanupInterval default=*/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* maxEntries default=*/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>Options:</p><ul><li><p><strong>cloneData</strong>: Use <code>true</code> if the data returned by <code>find()</code> should be cloned to avoid mutating the original data outside the <code>set()</code> method. Use <code>&#39;double&#39;</code> to also clone before saving value in storage using <code>set()</code>. Disabled is default</p></li><li><p><strong>cleanupInterval</strong>: The interval in milliseconds to run a setInterval job of cleaning old entries. If false, the job will not be created. Disabled is default</p></li><li><p><strong>maxEntries</strong>: The maximum number of entries to keep in the storage. Its hard to determine the size of the entries, so a smart FIFO order is used to determine eviction. If false, no check will be done and you may grow up memory usage. Disabled is default</p></li></ul><h2 id="web-storage-api" tabindex="-1">Web Storage API <a class="header-anchor" href="#web-storage-api" aria-label="Permalink to &quot;Web Storage API&quot;">​</a></h2><p>If you need persistent caching between page refreshes, you can use the <code>buildWebStorage</code> to get this behavior. It works by connecting our storage API to the browser’s <a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage" target="_blank" rel="noreferrer">Storage API</a>.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-qIeyf" id="tab-_I7Q-xe" checked="checked"><label for="tab-_I7Q-xe">Local Storage</label><input type="radio" name="group-qIeyf" id="tab-Nj1mGPR"><label for="tab-Nj1mGPR">Session Storage</label><input type="radio" name="group-qIeyf" id="tab--GlK5JF"><label for="tab--GlK5JF">Custom Storage</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Axios </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;axios&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { setupCache, buildWebStorage } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;axios-cache-interceptor&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#B392F0;">setupCache</span><span style="color:#E1E4E8;">(axios, { </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// As localStorage is a public storage, you can add a prefix</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// to all keys to avoid collisions with other code.</span></span>
<span class="line has-focus highlighted"><span style="color:#E1E4E8;">  storage: </span><span style="color:#B392F0;">buildWebStorage</span><span style="color:#E1E4E8;">(localStorage, </span><span style="color:#9ECBFF;">&#39;axios-cache:&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light has-focused-lines has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Axios </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;axios&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { setupCache, buildWebStorage } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;axios-cache-interceptor&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#6F42C1;">setupCache</span><span style="color:#24292E;">(axios, { </span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// As localStorage is a public storage, you can add a prefix</span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// to all keys to avoid collisions with other code.</span></span>
<span class="line has-focus highlighted"><span style="color:#24292E;">  storage: </span><span style="color:#6F42C1;">buildWebStorage</span><span style="color:#24292E;">(localStorage, </span><span style="color:#032F62;">&#39;axios-cache:&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line has-focus"><span style="color:#24292E;">});</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Axios </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;axios&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { setupCache, buildWebStorage } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;axios-cache-interceptor&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#B392F0;">setupCache</span><span style="color:#E1E4E8;">(axios, { </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// As sessionStorage is a public storage, you can add a prefix</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// to all keys to avoid collisions with other code.</span></span>
<span class="line has-focus highlighted"><span style="color:#E1E4E8;">  storage: </span><span style="color:#B392F0;">buildWebStorage</span><span style="color:#E1E4E8;">(sessionStorage, </span><span style="color:#9ECBFF;">&#39;axios-cache:&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light has-focused-lines has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Axios </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;axios&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { setupCache, buildWebStorage } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;axios-cache-interceptor&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#6F42C1;">setupCache</span><span style="color:#24292E;">(axios, { </span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// As sessionStorage is a public storage, you can add a prefix</span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// to all keys to avoid collisions with other code.</span></span>
<span class="line has-focus highlighted"><span style="color:#24292E;">  storage: </span><span style="color:#6F42C1;">buildWebStorage</span><span style="color:#24292E;">(sessionStorage, </span><span style="color:#032F62;">&#39;axios-cache:&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line has-focus"><span style="color:#24292E;">});</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Axios </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;axios&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { setupCache, buildWebStorage } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;axios-cache-interceptor&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line has-focus highlighted"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myStorage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Storage</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#B392F0;">setupCache</span><span style="color:#E1E4E8;">(axios, {</span></span>
<span class="line has-focus highlighted"><span style="color:#E1E4E8;">  storage: </span><span style="color:#B392F0;">buildWebStorage</span><span style="color:#E1E4E8;">(myStorage)</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light has-focused-lines has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Axios </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;axios&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { setupCache, buildWebStorage } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;axios-cache-interceptor&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line has-focus highlighted"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myStorage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Storage</span><span style="color:#24292E;">(); </span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#6F42C1;">setupCache</span><span style="color:#24292E;">(axios, {</span></span>
<span class="line has-focus highlighted"><span style="color:#24292E;">  storage: </span><span style="color:#6F42C1;">buildWebStorage</span><span style="color:#24292E;">(myStorage)</span></span>
<span class="line has-focus"><span style="color:#24292E;">});</span></span></code></pre></div></div></div><h3 id="browser-quota" tabindex="-1">Browser quota <a class="header-anchor" href="#browser-quota" aria-label="Permalink to &quot;Browser quota&quot;">​</a></h3><p>From <code>v0.9.0</code> onwards, web storage is able to detect and evict older entries if the browser’s quota is reached.</p><p>The eviction is done by the following algorithm:</p><ol><li>Just saved an value and got an error. <em>(Probably quota exceeded)</em></li><li>Evicts all expired keys that cannot enter the <code>stale</code> state.</li><li>If it fails again, evicts the oldest key with the given prefix.</li><li>Repeat step 2 and 3 until the object can be saved or the storage has been emptied.</li><li>If it still fails, the data is not saved. <em>Probably because the whole key is greater than the quota or other libraries already consumed the whole usable space.</em></li></ol><h2 id="buildstorage" tabindex="-1">buildStorage() <a class="header-anchor" href="#buildstorage" aria-label="Permalink to &quot;buildStorage()&quot;">​</a></h2><p>All integrated storages are wrappers around the <code>buildStorage</code> function. External libraries use it and if you want to build your own, <code>buildStorage</code> is the way to go!</p><p>The exported <code>buildStorage</code> function abstracts the storage interface and requires a super simple object to build the storage. It has 3 methods:</p><ul><li><p><code>set(key: string, value: NotEmptyStorageValue, currentRequest?: CacheRequestConfig): MaybePromise&lt;void&gt;</code>: Receives the key and the value, and optionally the current request. It should save the value in the storage.</p></li><li><p><code>remove(key: string, currentRequest?: CacheRequestConfig): MaybePromise&lt;void&gt;</code>: Receives the key and optionally the current request. It should remove the value from the storage.</p></li><li><p><code>find(key: string, currentRequest?: CacheRequestConfig) =&gt; MaybePromise&lt;StorageValue | undefined&gt;</code>: Receives the key and optionally the current request. It should return the value from the storage or <code>undefined</code> if not found.</p></li></ul><h2 id="third-party-storages" tabindex="-1">Third Party Storages <a class="header-anchor" href="#third-party-storages" aria-label="Permalink to &quot;Third Party Storages&quot;">​</a></h2><p>These are not guaranteed to work with the latest version of the library, neither are maintained by the axios cache interceptor team. But, as we provide a minimal interface for storages, you can use them as a base to also create your own.</p><ul><li><a href="#node-redis-storage">Node Redis v4</a></li><li><strong>Have another one?</strong></li><li><a href="https://github.com/arthurfiorette/axios-cache-interceptor/pulls" target="_blank" rel="noreferrer">Open a PR</a> to add it here.</li></ul><h2 id="node-redis-storage" tabindex="-1">Node Redis storage <a class="header-anchor" href="#node-redis-storage" aria-label="Permalink to &quot;Node Redis storage&quot;">​</a></h2><p>The node redis storage implementation is listed here because it shows the only tricky part when implementing a storage with an third party client that allows auto-evicting entries, as show on the <code>PXAT</code> property.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createClient } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;redis&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// v4</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { buildStorage, canStale } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;axios-cache-interceptor&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createClient</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* connection config */</span><span style="color:#E1E4E8;">);</span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">redisStorage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildStorage</span><span style="color:#E1E4E8;">({</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> client</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`axios-cache-\${</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(result) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StorageValue</span><span style="color:#E1E4E8;">));</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  },</span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`axios-cache-\${</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(value), {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      PXAT:</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// We don&#39;t want to keep indefinitely values in the storage if</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// their request don&#39;t finish somehow. Either set its value as</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// the TTL or 1 minute.</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        value.state </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;loading&#39;</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">            (req?.cache </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> req.cache.ttl </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;number&#39;</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> req.cache.ttl</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 1 minute in seconds</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">60000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// When a stale state has a determined value to expire, we can use it.</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">//   Or if the cached value cannot enter in stale state.</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          (value.state </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;stale&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> value.ttl) </span><span style="color:#F97583;">||</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">            (value.state </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;cached&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">canStale</span><span style="color:#E1E4E8;">(value))</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// eslint-disable-next-line @typescript-eslint/no-non-null-assertion</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">            value.createdAt </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> value.ttl</span><span style="color:#F97583;">!</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// otherwise, we can&#39;t determine when it should expire, so we keep</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//   it indefinitely.</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">undefined</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    });</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  },</span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">del</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`axios-cache-\${</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light has-focused-lines has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createClient } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;redis&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// v4</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { buildStorage, canStale } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;axios-cache-interceptor&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createClient</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* connection config */</span><span style="color:#24292E;">);</span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">redisStorage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildStorage</span><span style="color:#24292E;">({</span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line has-focus"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> client</span></span>
<span class="line has-focus"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`axios-cache-\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line has-focus"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">result</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(result) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StorageValue</span><span style="color:#24292E;">));</span></span>
<span class="line has-focus"><span style="color:#24292E;">  },</span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#24292E;">, </span><span style="color:#E36209;">req</span><span style="color:#24292E;">) {</span></span>
<span class="line has-focus"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`axios-cache-\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(value), {</span></span>
<span class="line has-focus"><span style="color:#24292E;">      PXAT:</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// We don&#39;t want to keep indefinitely values in the storage if</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// their request don&#39;t finish somehow. Either set its value as</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// the TTL or 1 minute.</span></span>
<span class="line has-focus"><span style="color:#24292E;">        value.state </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;loading&#39;</span></span>
<span class="line has-focus"><span style="color:#24292E;">          </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span></span>
<span class="line has-focus"><span style="color:#24292E;">            (req?.cache </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> req.cache.ttl </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;number&#39;</span></span>
<span class="line has-focus"><span style="color:#24292E;">              </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> req.cache.ttl</span></span>
<span class="line has-focus"><span style="color:#24292E;">              </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 1 minute in seconds</span></span>
<span class="line has-focus"><span style="color:#24292E;">                </span><span style="color:#005CC5;">60000</span><span style="color:#24292E;">)</span></span>
<span class="line has-focus"><span style="color:#24292E;">          </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// When a stale state has a determined value to expire, we can use it.</span></span>
<span class="line has-focus"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//   Or if the cached value cannot enter in stale state.</span></span>
<span class="line has-focus"><span style="color:#24292E;">          (value.state </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;stale&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> value.ttl) </span><span style="color:#D73A49;">||</span></span>
<span class="line has-focus"><span style="color:#24292E;">            (value.state </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;cached&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">canStale</span><span style="color:#24292E;">(value))</span></span>
<span class="line has-focus"><span style="color:#24292E;">          </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// eslint-disable-next-line @typescript-eslint/no-non-null-assertion</span></span>
<span class="line has-focus"><span style="color:#24292E;">            value.createdAt </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> value.ttl</span><span style="color:#D73A49;">!</span></span>
<span class="line has-focus"><span style="color:#24292E;">          </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// otherwise, we can&#39;t determine when it should expire, so we keep</span></span>
<span class="line has-focus"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//   it indefinitely.</span></span>
<span class="line has-focus"><span style="color:#24292E;">            </span><span style="color:#005CC5;">undefined</span></span>
<span class="line has-focus"><span style="color:#24292E;">    });</span></span>
<span class="line has-focus"><span style="color:#24292E;">  },</span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line has-focus"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">del</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`axios-cache-\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line has-focus"><span style="color:#24292E;">  }</span></span>
<span class="line has-focus"><span style="color:#24292E;">});</span></span></code></pre></div><p>However you can use the <a href="#bui"><code>buildStorage</code></a> function to integrate with ANY storage you want, like <code>localForage</code>, <code>ioredis</code>, <code>memcache</code> and others.</p>`,31),p=[l];function t(c,r,i,y,E,h){return a(),n("div",null,p)}const g=s(e,[["render",t]]);export{u as __pageData,g as default};
