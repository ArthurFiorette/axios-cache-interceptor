import{_ as s,c as a,o as e,d as n}from"./app.ab3061d8.js";const d=JSON.parse('{"title":"Storages","description":"","frontmatter":{},"headers":[{"level":2,"title":"Memory Storage","slug":"memory-storage","link":"#memory-storage","children":[]},{"level":2,"title":"Web Storage API","slug":"web-storage-api","link":"#web-storage-api","children":[{"level":3,"title":"Browser quota","slug":"browser-quota","link":"#browser-quota","children":[]}]},{"level":2,"title":"buildStorage()","slug":"buildstorage","link":"#buildstorage","children":[]},{"level":2,"title":"Third Party Storages","slug":"third-party-storages","link":"#third-party-storages","children":[]},{"level":2,"title":"Node Redis Example","slug":"node-redis-example","link":"#node-redis-example","children":[]}],"relativePath":"guide/storages.md","lastUpdated":1676650566000}'),o={name:"guide/storages.md"},l=n(`<h1 id="storages" tabindex="-1">Storages <a class="header-anchor" href="#storages" aria-hidden="true">#</a></h1><p>Storages are the responsible to save, retrieve and serialize (if needed) cache data. They are completely customizable and you can code or using another one’s published on NPM.</p><p>They are meant to be the middleware between the cache interceptor and some sort of database (persistent or not) you may have. Our interceptors will call its methods internally to save and retrieve data. But you can do it manually to work programmatically on your way.</p><p>Currently, two storages are included in the library by default:</p><ul><li><a href="#memory-storage">Memory Storage</a> accessible with <code>buildMemoryStorage</code> <em>(works on Node and Web)</em></li><li><a href="#web-storage-api">Web Storage API</a> accessible with <code>buildWebStorage</code> <em>(works on Web only)</em></li></ul><h2 id="memory-storage" tabindex="-1">Memory Storage <a class="header-anchor" href="#memory-storage" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong>This is the storage chosen by default</strong></p></div><p>A memory storage is the simplest one. It works everywhere and its values are lost upon page reload or when the process is killed.</p><p>If you are directly mutating some response property, you probably will face some reference issues because the storage will also get mutated. To avoid that, you can use the <code>clone</code> option to clone the response before saving it. <em>Just like <a href="https://github.com/arthurfiorette/axios-cache-interceptor/issues/163" target="_blank" rel="noreferrer">#136</a> and many others.</em></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Axios </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">axios</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setupCache</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buildMemoryStorage</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">axios-cache-interceptor</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setupCache</span><span style="color:#A6ACCD;">(axios</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// You don&#39;t need to to that, as it is the default option.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">storage</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">buildMemoryStorage</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;font-style:italic;">/* cloneData default=*/</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="web-storage-api" tabindex="-1">Web Storage API <a class="header-anchor" href="#web-storage-api" aria-hidden="true">#</a></h2><p>If you need persistent caching between page refreshes, you can use the <code>buildWebStorage</code> to get this behavior. It works by connecting our storage API to the browser’s <a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage" target="_blank" rel="noreferrer">Storage API</a>.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-N8EbX" id="tab-f9HmqcO" checked="checked"><label for="tab-f9HmqcO">Local Storage</label><input type="radio" name="group-N8EbX" id="tab-e0xAmGN"><label for="tab-e0xAmGN">Session Storage</label><input type="radio" name="group-N8EbX" id="tab-IYTqQSB"><label for="tab-IYTqQSB">Custom Storage</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-focused-lines has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Axios </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">axios</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setupCache</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buildWebStorage</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">axios-cache-interceptor</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#82AAFF;">setupCache</span><span style="color:#A6ACCD;">(axios</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line has-focus"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// As localStorage is a public storage, you can add a prefix</span></span>
<span class="line has-focus"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// to all keys to avoid collisions with other code.</span></span>
<span class="line has-focus highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">storage</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">buildWebStorage</span><span style="color:#A6ACCD;">(localStorage</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">axios-cache:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line has-focus"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-focused-lines has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Axios </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">axios</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setupCache</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buildWebStorage</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">axios-cache-interceptor</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#82AAFF;">setupCache</span><span style="color:#A6ACCD;">(axios</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line has-focus"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// As sessionStorage is a public storage, you can add a prefix</span></span>
<span class="line has-focus"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// to all keys to avoid collisions with other code.</span></span>
<span class="line has-focus highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">storage</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">buildWebStorage</span><span style="color:#A6ACCD;">(sessionStorage</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">axios-cache:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line has-focus"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-focused-lines has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Axios </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">axios</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setupCache</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buildWebStorage</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">axios-cache-interceptor</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line has-focus highlighted"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myStorage </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Storage</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#82AAFF;">setupCache</span><span style="color:#A6ACCD;">(axios</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line has-focus highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">storage</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">buildWebStorage</span><span style="color:#A6ACCD;">(myStorage)</span></span>
<span class="line has-focus"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></div></div><h3 id="browser-quota" tabindex="-1">Browser quota <a class="header-anchor" href="#browser-quota" aria-hidden="true">#</a></h3><p>From <code>v0.9.0</code> onwards, web storage is able to detect and evict older entries if the browser’s quota is reached.</p><p>The eviction is done by the following algorithm:</p><ol><li>Just saved an value and got an error. <em>(Probably quota exceeded)</em></li><li>Evicts all expired keys that cannot enter the <code>stale</code> state.</li><li>If it fails again, evicts the oldest key with the given prefix.</li><li>Repeat step 2 and 3 until the object can be saved or the storage has been emptied.</li><li>If it still fails, the data is not saved. <em>Probably because the whole key is greater than the quota or other libraries already consumed the whole usable space.</em></li></ol><h2 id="buildstorage" tabindex="-1">buildStorage() <a class="header-anchor" href="#buildstorage" aria-hidden="true">#</a></h2><p>All integrated storages are wrappers around the <code>buildStorage</code> function. External libraries use it and if you want to build your own, <code>buildStorage</code> is the way to go!</p><p>The exported <code>buildStorage</code> function abstracts the storage interface and requires a super simple object to build the storage. It has 3 methods:</p><ul><li><p><code>set(key: string, value: NotEmptyStorageValue, currentRequest?: CacheRequestConfig): MaybePromise&lt;void&gt;</code>: Receives the key and the value, and optionally the current request. It should save the value in the storage.</p></li><li><p><code>remove(key: string, currentRequest?: CacheRequestConfig): MaybePromise&lt;void&gt;</code>: Receives the key and optionally the current request. It should remove the value from the storage.</p></li><li><p><code>find(key: string, currentRequest?: CacheRequestConfig) =&gt; MaybePromise&lt;StorageValue | undefined&gt;</code>: Receives the key and optionally the current request. It should return the value from the storage or <code>undefined</code> if not found.</p></li></ul><h2 id="third-party-storages" tabindex="-1">Third Party Storages <a class="header-anchor" href="#third-party-storages" aria-hidden="true">#</a></h2><p>These are not guaranteed to work with the latest version of the library, neither are maintained by the axios cache interceptor team. But, as we provide a minimal interface for storages, you can use them as a base to also create your own.</p><ul><li><a href="#node-redis-v4-example">Node Redis v4</a></li><li><strong>Have another one?</strong></li><li><a href="https://github.com/arthurfiorette/axios-cache-interceptor/pulls" target="_blank" rel="noreferrer">Open a PR</a> to add it here.</li></ul><h2 id="node-redis-example" tabindex="-1">Node Redis Example <a class="header-anchor" href="#node-redis-example" aria-hidden="true">#</a></h2><p>To inspire you, here is an example for a server-side application that uses Redis as the storage.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-focused-lines has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createClient</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">redis</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// v4</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buildStorage</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">canStale</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">axios-cache-interceptor</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> client </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createClient</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;font-style:italic;">/* connection config */</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> redisStorage </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">buildStorage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">find</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line has-focus"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">axios-cache:</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line has-focus"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line has-focus"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// We use canStale function here because we shouldn&#39;t let</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// redis remove automatically the key if it can enter the</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// stale state.</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line has-focus"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">axios-cache:</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line has-focus"><span style="color:#F07178;">      PXAT</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">canStale</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">expiresAt</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined</span></span>
<span class="line has-focus"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line has-focus"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">remove</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line has-focus"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">del</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">axios-cache:</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line has-focus"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line has-focus"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,27),t=[l];function p(r,c,i,y,D,F){return e(),a("div",null,t)}const h=s(o,[["render",p]]);export{d as __pageData,h as default};
