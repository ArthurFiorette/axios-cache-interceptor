import{_ as n,c as l,J as i,a as t,a4 as a,m as e,o,E as h}from"./chunks/framework.SJ13iSEV.js";const w=JSON.parse('{"title":"setupCache()","description":"","frontmatter":{},"headers":[],"relativePath":"config.md","filePath":"config.md","lastUpdated":1711484624000}'),r={name:"config.md"},p=a(`<h1 id="setupcache" tabindex="-1">setupCache() <a class="header-anchor" href="#setupcache" aria-label="Permalink to &quot;setupCache()&quot;">​</a></h1><p>The <code>setupCache</code> function receives the axios instance and a set of optional properties described below. This modifies the axios instance in place and returns it.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> axios</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setupCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axiosInstance, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OPTIONS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <code>setupCache</code> function receives global options and all <a href="./config/request-specifics">request specifics</a> ones too. This way, you can customize the defaults for all requests.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you want to use the same cache interceptor for all your axios instances, you can call <code>setupCache</code> with the default axios instance.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Axios </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;axios&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setupCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Axios, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OPTIONS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></div><h2 id="storage" tabindex="-1">storage <a class="header-anchor" href="#storage" aria-label="Permalink to &quot;storage&quot;">​</a></h2>`,6),d=a('<ul><li>Type: <code>AxiosStorage</code></li><li>Default: <code>buildMemoryStorage()</code></li></ul><p>A storage interface is the entity responsible for saving, retrieving and serializing data received from network and requested when a axios call is made.</p><p>See the <a href="./guide/storages">Storages</a> page for more information.</p><h2 id="generatekey" tabindex="-1">generateKey <a class="header-anchor" href="#generatekey" aria-label="Permalink to &quot;generateKey&quot;">​</a></h2>',4),c=a('<ul><li>Type: <code>KeyGenerator&lt;unknown, unknown&gt;</code></li><li>Default: <code>defaultKeyGenerator</code></li></ul><p>The <code>generateKey</code> property defines the function responsible for generating unique keys for each request cache.</p><p>By default, it employs a strategy that prioritizes the <code>id</code> if available, falling back to a string generated using various request properties. The default implementation generates a 32-bit hash key using the <code>method</code>, <code>baseURL</code>, <code>params</code>, <code>data</code>, and <code>url</code> of the request.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>In any persistent cache scenario where hitting over 77K unique keys is a possibility, you should use a more robust hashing algorithm.</p><p><a href="./guide/request-id#custom-generator">Read more</a></p></div><h2 id="waiting" tabindex="-1">waiting <a class="header-anchor" href="#waiting" aria-label="Permalink to &quot;waiting&quot;">​</a></h2>',5),k=e("ul",null,[e("li",null,[t("Type: "),e("code",null,"Record<string, Deferred<CachedResponse>>")]),e("li",null,[t("Default: "),e("code",null,"{}")])],-1),u=e("p",null,"A simple object that will hold a promise for each pending request. Used to handle concurrent requests.",-1),g=e("p",null,"You’d normally not need to change this, but it is exposed in case you need to use it as some sort of listener of know when a request is waiting for other to finish.",-1),E=e("h2",{id:"headerinterpreter",tabindex:"-1"},[t("headerInterpreter "),e("a",{class:"header-anchor",href:"#headerinterpreter","aria-label":'Permalink to "headerInterpreter"'},"​")],-1),y=a(`<ul><li>Type: <code>HeadersInterpreter</code></li><li>Default: <code>defaultHeaderInterpreter</code></li></ul><p>The function used to interpret all headers from a request and determine a time to live (<code>ttl</code>) number.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Many REST backends returns some variation of <code>Cache-Control: no-cache</code> or <code>Cache-Control: no-store</code> headers, which tell us to ignore caching at all. You shall disable <code>headerInterpreter</code> for those requests.</p><p><em>If the debug mode prints <code>Cache header interpreted as &#39;dont cache&#39;</code> this is probably the reason.</em></p></div><p>The possible returns are:</p><ul><li><code>&#39;dont cache&#39;</code>: the request will not be cached.</li><li><code>&#39;not enough headers&#39;</code>: the request will find other ways to determine the TTL value.</li><li><code>number</code>: used as the TTL value.</li><li><code>{ cache: number, stale: number }</code>: used as the TTL value and stale TTL value</li></ul><details class="details custom-block"><summary>Example of a custom headerInterpreter</summary><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { setupCache, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HeadersInterpreter } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;axios-cache-interceptor&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myHeaderInterpreter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HeadersInterpreter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (headers[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x-my-custom-header&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> seconds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(headers[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x-my-custom-header&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (seconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dont cache&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> seconds;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;not enough headers&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></details><h2 id="requestinterceptor" tabindex="-1">requestInterceptor <a class="header-anchor" href="#requestinterceptor" aria-label="Permalink to &quot;requestInterceptor&quot;">​</a></h2>`,7),_=a('<ul><li>Type: <code>AxiosInterceptor&lt;CacheRequestConfig&lt;unknown, unknown&gt;&gt;</code></li><li>Default: <code>defaultRequestInterceptor()</code></li></ul><p>The function that will be used to intercept the request before it is sent to the axios adapter.</p><p>It is the main function of this library, as it is the bridge between the axios request and the cache.</p><p>It wasn’t meant to be changed, but if you need to, you can do it by passing a new function to this property.</p><p>See its code for more information <a href="https://github.com/arthurfiorette/axios-cache-interceptor/tree/main/src/interceptors" target="_blank" rel="noreferrer">here</a>.</p><h2 id="responseinterceptor" tabindex="-1">responseInterceptor <a class="header-anchor" href="#responseinterceptor" aria-label="Permalink to &quot;responseInterceptor&quot;">​</a></h2>',6),m=a('<ul><li>Type: <code>AxiosInterceptor&lt;CacheAxiosResponse&lt;unknown, unknown&gt;&gt;</code></li><li>Default: <code>defaultResponseInterceptor()</code></li></ul><p>The function that will be used to intercept the request after it is returned by the axios adapter.</p><p>It is the second most important function of this library, as it is the bridge between the axios response and the cache.</p><p>It wasn’t meant to be changed, but if you need to, you can do it by passing a new function to this property.</p><p>See its code for more information <a href="https://github.com/arthurfiorette/axios-cache-interceptor/tree/main/src/interceptors" target="_blank" rel="noreferrer">here</a>.</p><h2 id="debug" tabindex="-1">debug <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;debug&quot;">​</a></h2>',6),f=a(`<ul><li>Type: <code>(msg: { id?: string; msg?: string; data?: unknown }) =&gt; void</code> or <code>undefined</code></li><li>Default: <code>undefined</code></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This option only works when targeting a <a href="./guide/debugging">Development</a> build.</p></div><p>The debug option will print debug information in the console. It is good if you need to trace any undesired behavior or issue. You can enable it by setting <code>debug</code> to a function that receives an string and returns nothing.</p><p>Read the <a href="./guide/debugging">Debugging</a> page for the complete guide.</p><details class="details custom-block"><summary>Example of a custom debug function</summary><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Will print debug info in the console.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setupCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axiosInstance, { debug: console.log });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Own logging platform.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setupCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axiosInstance, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myLoggerExample.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ id, msg, data })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Disables debug. (default)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setupCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axiosInstance, { debug: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div></details>`,5);function b(F,T,C,A,v,x){const s=h("Badge");return o(),l("div",null,[p,i(s,{text:"optional",type:"warning"}),d,i(s,{text:"optional",type:"warning"}),c,i(s,{text:"optional",type:"warning"}),k,u,g,E,i(s,{text:"optional",type:"warning"}),y,i(s,{text:"optional",type:"warning"}),_,i(s,{text:"optional",type:"warning"}),m,i(s,{text:"dev only",type:"danger"}),t(),i(s,{text:"optional",type:"warning"}),f])}const D=n(r,[["render",b]]);export{w as __pageData,D as default};
