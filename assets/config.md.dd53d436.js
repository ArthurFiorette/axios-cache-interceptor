import{_ as t,C as l,o as p,c as r,H as a,a as o,S as n,k as s}from"./chunks/framework.08cb68c8.js";const I=JSON.parse('{"title":"setupCache()","description":"","frontmatter":{},"headers":[],"relativePath":"config.md","filePath":"config.md","lastUpdated":1698414254000}'),c={name:"config.md"},i=n('<h1 id="setupcache" tabindex="-1">setupCache() <a class="header-anchor" href="#setupcache" aria-label="Permalink to &quot;setupCache()&quot;">​</a></h1><p>The <code>setupCache</code> function receives the axios instance and a set of optional properties described below. They are used and shared by the entire application workflow.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">axios</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setupCache</span><span style="color:#E1E4E8;">(axios, </span><span style="color:#79B8FF;">OPTIONS</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">axios</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setupCache</span><span style="color:#24292E;">(axios, </span><span style="color:#005CC5;">OPTIONS</span><span style="color:#24292E;">);</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <code>setupCache</code> function receives global options and all <a href="./config/request-specifics">request specifics</a> ones too. This way, you can customize the defaults for all requests.</p></div><h2 id="storage" tabindex="-1">storage <a class="header-anchor" href="#storage" aria-label="Permalink to &quot;storage&quot;">​</a></h2>',5),d=n('<ul><li>Type: <code>AxiosStorage</code></li><li>Default: <code>buildMemoryStorage()</code></li></ul><p>A storage interface is the entity responsible for saving, retrieving and serializing data received from network and requested when a axios call is made.</p><p>See the <a href="./guide/storages">Storages</a> page for more information.</p><h2 id="generatekey" tabindex="-1">generateKey <a class="header-anchor" href="#generatekey" aria-label="Permalink to &quot;generateKey&quot;">​</a></h2>',4),y=n('<ul><li>Type: <code>KeyGenerator&lt;unknown, unknown&gt;</code></li><li>Default: <code>defaultKeyGenerator</code></li></ul><p>The function used to create different keys for each request. Defaults to a function that priorizes the id, and if not specified, a string is generated using the <code>method</code>, <code>baseURL</code>, <code>params</code>, <code>data</code> and <code>url</code>.</p><p>You can learn on how to use them on the <a href="./guide/request-id#custom-generator">Request ID</a> page.</p><h2 id="waiting" tabindex="-1">waiting <a class="header-anchor" href="#waiting" aria-label="Permalink to &quot;waiting&quot;">​</a></h2>',4),u=s("ul",null,[s("li",null,[o("Type: "),s("code",null,"Record<string, Deferred<CachedResponse>>")]),s("li",null,[o("Default: "),s("code",null,"{}")])],-1),h=s("p",null,"A simple object that will hold a promise for each pending request. Used to handle concurrent requests.",-1),E=s("p",null,"You’d normally not need to change this, but it is exposed in case you need to use it as some sort of listener of know when a request is waiting for other to finish.",-1),g=s("h2",{id:"headerinterpreter",tabindex:"-1"},[o("headerInterpreter "),s("a",{class:"header-anchor",href:"#headerinterpreter","aria-label":'Permalink to "headerInterpreter"'},"​")],-1),_=n(`<ul><li>Type: <code>HeadersInterpreter</code></li><li>Default: <code>defaultHeaderInterpreter</code></li></ul><p>The function used to interpret all headers from a request and determine a time to live (<code>ttl</code>) number.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Many REST backends returns some variation of <code>Cache-Control: no-cache</code> or <code>Cache-Control: no-store</code> headers, which tell us to ignore caching at all. You shall disable <code>headerInterpreter</code> for those requests.</p><p><em>If the debug mode prints <code>Cache header interpreted as &#39;dont cache&#39;</code> this is probably the reason.</em></p></div><p>The possible returns are:</p><ul><li><code>&#39;dont cache&#39;</code>: the request will not be cached.</li><li><code>&#39;not enough headers&#39;</code>: the request will find other ways to determine the TTL value.</li><li><code>number</code>: used as the TTL value.</li><li><code>{ cache: number, stale: number }</code>: used as the TTL value and stale TTL value</li></ul><details class="details custom-block"><summary>Example of a custom headerInterpreter</summary><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { setupCache, </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> HeadersInterpreter } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;axios-cache-interceptor&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">myHeaderInterpreter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HeadersInterpreter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">headers</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (headers[</span><span style="color:#9ECBFF;">&#39;x-my-custom-header&#39;</span><span style="color:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">seconds</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(headers[</span><span style="color:#9ECBFF;">&#39;x-my-custom-header&#39;</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (seconds </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;dont cache&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> seconds;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;not enough headers&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { setupCache, </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> HeadersInterpreter } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;axios-cache-interceptor&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myHeaderInterpreter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HeadersInterpreter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">headers</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (headers[</span><span style="color:#032F62;">&#39;x-my-custom-header&#39;</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">seconds</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(headers[</span><span style="color:#032F62;">&#39;x-my-custom-header&#39;</span><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (seconds </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;dont cache&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> seconds;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;not enough headers&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div></details><h2 id="requestinterceptor" tabindex="-1">requestInterceptor <a class="header-anchor" href="#requestinterceptor" aria-label="Permalink to &quot;requestInterceptor&quot;">​</a></h2>`,7),f=n('<ul><li>Type: <code>AxiosInterceptor&lt;CacheRequestConfig&lt;unknown, unknown&gt;&gt;</code></li><li>Default: <code>defaultRequestInterceptor()</code></li></ul><p>The function that will be used to intercept the request before it is sent to the axios adapter.</p><p>It is the main function of this library, as it is the bridge between the axios request and the cache.</p><p>It wasn’t meant to be changed, but if you need to, you can do it by passing a new function to this property.</p><p>See its code for more information <a href="https://github.com/arthurfiorette/axios-cache-interceptor/tree/main/src/interceptors" target="_blank" rel="noreferrer">here</a>.</p><h2 id="responseinterceptor" tabindex="-1">responseInterceptor <a class="header-anchor" href="#responseinterceptor" aria-label="Permalink to &quot;responseInterceptor&quot;">​</a></h2>',6),m=n('<ul><li>Type: <code>AxiosInterceptor&lt;CacheAxiosResponse&lt;unknown, unknown&gt;&gt;</code></li><li>Default: <code>defaultResponseInterceptor()</code></li></ul><p>The function that will be used to intercept the request after it is returned by the axios adapter.</p><p>It is the second most important function of this library, as it is the bridge between the axios response and the cache.</p><p>It wasn’t meant to be changed, but if you need to, you can do it by passing a new function to this property.</p><p>See its code for more information <a href="https://github.com/arthurfiorette/axios-cache-interceptor/tree/main/src/interceptors" target="_blank" rel="noreferrer">here</a>.</p><h2 id="debug" tabindex="-1">debug <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;debug&quot;">​</a></h2>',6),b=n(`<ul><li>Type: <code>(msg: { id?: string; msg?: string; data?: unknown }) =&gt; void</code> or <code>undefined</code></li><li>Default: <code>undefined</code></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This option only works when targeting a <a href="./guide/debugging">Development</a> build.</p></div><p>The debug option will print debug information in the console. It is good if you need to trace any undesired behavior or issue. You can enable it by setting <code>debug</code> to a function that receives an string and returns nothing.</p><p>Read the <a href="./guide/debugging">Debugging</a> page for the complete guide.</p><details class="details custom-block"><summary>Example of a custom debug function</summary><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Will print debug info in the console.</span></span>
<span class="line"><span style="color:#B392F0;">setupCache</span><span style="color:#E1E4E8;">(axios, { debug: console.log });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Own logging platform.</span></span>
<span class="line"><span style="color:#B392F0;">setupCache</span><span style="color:#E1E4E8;">(axios, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">: ({ </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> myLoggerExample.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">({ id, msg, data })</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Disables debug. (default)</span></span>
<span class="line"><span style="color:#B392F0;">setupCache</span><span style="color:#E1E4E8;">(axios, { debug: </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Will print debug info in the console.</span></span>
<span class="line"><span style="color:#6F42C1;">setupCache</span><span style="color:#24292E;">(axios, { debug: console.log });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Own logging platform.</span></span>
<span class="line"><span style="color:#6F42C1;">setupCache</span><span style="color:#24292E;">(axios, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">: ({ </span><span style="color:#E36209;">id</span><span style="color:#24292E;">, </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> myLoggerExample.</span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">({ id, msg, data })</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Disables debug. (default)</span></span>
<span class="line"><span style="color:#6F42C1;">setupCache</span><span style="color:#24292E;">(axios, { debug: </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> });</span></span></code></pre></div></details>`,5);function T(C,F,A,x,k,w){const e=l("Badge");return p(),r("div",null,[i,a(e,{text:"optional",type:"warning"}),d,a(e,{text:"optional",type:"warning"}),y,a(e,{text:"optional",type:"warning"}),u,h,E,g,a(e,{text:"optional",type:"warning"}),_,a(e,{text:"optional",type:"warning"}),f,a(e,{text:"optional",type:"warning"}),m,a(e,{text:"dev only",type:"danger"}),o(),a(e,{text:"optional",type:"warning"}),b])}const v=t(c,[["render",T]]);export{I as __pageData,v as default};
