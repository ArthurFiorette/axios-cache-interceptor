import{_ as s,o as n,c as e,S as a}from"./chunks/framework.c5c38cfd.js";const u=JSON.parse('{"title":"Other Interceptors","description":"","frontmatter":{},"headers":[],"relativePath":"guide/interceptors.md","filePath":"guide/interceptors.md","lastUpdated":1693771464000}'),o={name:"guide/interceptors.md"},p=a(`<h1 id="other-interceptors" tabindex="-1">Other Interceptors <a class="header-anchor" href="#other-interceptors" aria-label="Permalink to &quot;Other Interceptors&quot;">​</a></h1><p>When combining <code>axios-cache-adapter</code> with other interceptors, you may encounter some inconsistences. Which is explained in the next section.</p><h2 id="tl-dr" tabindex="-1">TL;DR <a class="header-anchor" href="#tl-dr" aria-label="Permalink to &quot;TL;DR&quot;">​</a></h2><ul><li><strong>Request</strong> interceptors registered before <code>setupCache()</code> are ran before and registrations made after are ran after.</li><li><strong>Response</strong> interceptors registered before <code>setupCache()</code> are ran <strong>after</strong> and registrations made after are ran <strong>before</strong>.</li></ul><h2 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h2><p>Axios interceptors are ran differently for the request and response ones.</p><ul><li><strong>Request interceptors</strong> are FILO <em>(First In Last Out)</em></li><li><strong>Response interceptors</strong> are FIFO <em>(First In First Out)</em></li></ul><p>As explained better in the <a href="https://github.com/axios/axios#interceptors" target="_blank" rel="noreferrer">Axios documentation</a> and in <a href="https://github.com/arthurfiorette/axios-cache-interceptor/issues/449#issuecomment-1370327566" target="_blank" rel="noreferrer">this issue</a>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// This will be ran BEFORE the cache interceptor</span></span>
<span class="line"><span style="color:#E1E4E8;">axios.interceptors.request.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> req);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// This will be ran AFTER the cache interceptor</span></span>
<span class="line"><span style="color:#E1E4E8;">axios.interceptors.response.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> res);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setupCache</span><span style="color:#E1E4E8;">(axios);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// This will be ran AFTER the cache interceptor</span></span>
<span class="line"><span style="color:#E1E4E8;">axios.interceptors.request.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> req);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// This will be ran BEFORE the cache interceptor</span></span>
<span class="line"><span style="color:#E1E4E8;">axios.interceptors.response.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> res);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// This will be ran BEFORE the cache interceptor</span></span>
<span class="line"><span style="color:#24292E;">axios.interceptors.request.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">((</span><span style="color:#E36209;">req</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> req);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// This will be ran AFTER the cache interceptor</span></span>
<span class="line"><span style="color:#24292E;">axios.interceptors.response.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> res);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">setupCache</span><span style="color:#24292E;">(axios);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// This will be ran AFTER the cache interceptor</span></span>
<span class="line"><span style="color:#24292E;">axios.interceptors.request.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">((</span><span style="color:#E36209;">req</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> req);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// This will be ran BEFORE the cache interceptor</span></span>
<span class="line"><span style="color:#24292E;">axios.interceptors.response.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> res);</span></span></code></pre></div><hr><h2 id="extending-types" tabindex="-1">Extending types <a class="header-anchor" href="#extending-types" aria-label="Permalink to &quot;Extending types&quot;">​</a></h2><p>When using axios-cache-interceptor, you’ll note that it have a different type than the defaults <code>AxiosInstance</code>, <code>AxiosRequestConfig</code> and <code>AxiosResponse</code>. That’s because was chosen to override axios’s interfaces instead of extending, to avoid breaking changes with other libraries.</p><p>However, this also means that when integrating with other packages or creating your own custom interceptor, you need to override/extend our own types, <code>CacheInstance</code>, <code>CacheRequestConfig</code> and <code>CacheAxiosResponse</code> to match your needs.</p><p>This can be done as shown below:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;axios-cache-interceptor&#39;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CacheRequestConfig</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">R</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">unknown</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">D</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">unknown</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">customProperty</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">module</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;axios-cache-interceptor&#39;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CacheRequestConfig</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">R</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">unknown</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">unknown</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">customProperty</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,15),t=[p];function l(r,c,i,E,y,h){return n(),e("div",null,t)}const g=s(o,[["render",l]]);export{u as __pageData,g as default};
