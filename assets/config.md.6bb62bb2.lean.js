import{_ as t,c as l,a as n,b as o,d as a,e,o as p,r}from"./app.9aca6851.js";const v=JSON.parse('{"title":"Global","description":"","frontmatter":{},"headers":[{"level":2,"title":"storage","slug":"storage","link":"#storage","children":[]},{"level":2,"title":"generateKey","slug":"generatekey","link":"#generatekey","children":[]},{"level":2,"title":"waiting","slug":"waiting","link":"#waiting","children":[]},{"level":2,"title":"headerInterpreter","slug":"headerinterpreter","link":"#headerinterpreter","children":[]},{"level":2,"title":"requestInterceptor","slug":"requestinterceptor","link":"#requestinterceptor","children":[]},{"level":2,"title":"responseInterceptor","slug":"responseinterceptor","link":"#responseinterceptor","children":[]},{"level":2,"title":"debug","slug":"debug","link":"#debug","children":[]}],"relativePath":"config.md","lastUpdated":1670290591000}'),c={name:"config.md"},i=a("",5),d=a("",4),y=a("",4),D=e("ul",null,[e("li",null,[o("Type: "),e("code",null,"Record<string, Deferred<CachedResponse>>")]),e("li",null,[o("Default: "),e("code",null,"{}")])],-1),u=e("p",null,"A simple object that will hold a promise for each pending request. Used to handle concurrent requests.",-1),h=e("p",null,"You'd normally not need to change this, but it is exposed in case you need to use it as some sort of listener of know when a request is waiting for other to finish.",-1),F=e("h2",{id:"headerinterpreter",tabindex:"-1"},[o("headerInterpreter "),e("a",{class:"header-anchor",href:"#headerinterpreter","aria-hidden":"true"},"#")],-1),A=a("",6),C=a("",6),g=a("",6),_=a("",5);function f(b,m,T,w,x,I){const s=r("Badge");return p(),l("div",null,[i,n(s,{text:"optional",type:"warning"}),d,n(s,{text:"optional",type:"warning"}),y,n(s,{text:"optional",type:"warning"}),D,u,h,F,n(s,{text:"optional",type:"warning"}),A,n(s,{text:"optional",type:"warning"}),C,n(s,{text:"optional",type:"warning"}),g,n(s,{text:"dev only",type:"danger"}),o(),n(s,{text:"optional",type:"warning"}),_])}const S=t(c,[["render",f]]);export{v as __pageData,S as default};
