import{_ as s,o as e,c as a,R as n}from"./chunks/framework.8e8e72cd.js";const C=JSON.parse('{"title":"Other Interceptors","description":"","frontmatter":{},"headers":[],"relativePath":"guide/interceptors.md","filePath":"guide/interceptors.md","lastUpdated":1686330189000}'),t={name:"guide/interceptors.md"},o=n(`<h1 id="other-interceptors" tabindex="-1">Other Interceptors <a class="header-anchor" href="#other-interceptors" aria-label="Permalink to &quot;Other Interceptors&quot;">​</a></h1><p>When combining <code>axios-cache-adapter</code> with other interceptors, you may encounter some inconsistences. Which is explained in the next section.</p><h2 id="tl-dr" tabindex="-1">TL;DR <a class="header-anchor" href="#tl-dr" aria-label="Permalink to &quot;TL;DR&quot;">​</a></h2><ul><li><strong>Request</strong> interceptors registered before <code>setupCache()</code> are ran before and registrations made after are ran after.</li><li><strong>Response</strong> interceptors registered before <code>setupCache()</code> are ran <strong>after</strong> and registrations made after are ran <strong>before</strong>.</li></ul><h2 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h2><p>Axios interceptors are ran differently for the request and response ones.</p><ul><li><strong>Request interceptors</strong> are FILO <em>(First In Last Out)</em></li><li><strong>Response interceptors</strong> are FIFO <em>(First In First Out)</em></li></ul><p>As explained better in the <a href="https://github.com/axios/axios#interceptors" target="_blank" rel="noreferrer">Axios documentation</a> and in <a href="https://github.com/arthurfiorette/axios-cache-interceptor/issues/449#issuecomment-1370327566" target="_blank" rel="noreferrer">this issue</a>.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// This will be ran BEFORE the cache interceptor</span></span>
<span class="line"><span style="color:#A6ACCD;">axios</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">interceptors</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> req)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// This will be ran AFTER the cache interceptor</span></span>
<span class="line"><span style="color:#A6ACCD;">axios</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">interceptors</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> res)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setupCache</span><span style="color:#A6ACCD;">(axios)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// This will be ran AFTER the cache interceptor</span></span>
<span class="line"><span style="color:#A6ACCD;">axios</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">interceptors</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> req)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// This will be ran BEFORE the cache interceptor</span></span>
<span class="line"><span style="color:#A6ACCD;">axios</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">interceptors</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> res)</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,9),r=[o];function l(p,c,i,D,y,A){return e(),a("div",null,r)}const h=s(t,[["render",l]]);export{C as __pageData,h as default};
